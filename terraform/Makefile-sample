# ----------------------------------
# Requirements:
# - terraform
# - terraform-docs
# - terraform-landscape
# - tfenv
# - tflint
# - tfsec
# - checkov
# - infracost
# - awscli
# - aws-vault
# - yq
# - pre-commit
# ----------------------------------

# ----------------------------------
# Colors
# ----------------------------------
NOCOLOR='\033[0m'
RED='\033[0;31m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
LIGHTGRAY='\033[0;37m'
DARKGRAY='\033[1;30m'
LIGHTRED='\033[1;31m'
LIGHTGREEN='\033[1;32m'
YELLOW='\033[1;33m'
LIGHTBLUE='\033[1;34m'
LIGHTPURPLE='\033[1;35m'
LIGHTCYAN='\033[1;36m'
WHITE='\033[1;37m'

# ----------------------------------
# Terraform Global ENV VARs
# ----------------------------------
TERRAFORM_VERSION?=0.14.3
REGION?=eu-west-1
PROFILE?=xxx-dev
GIT_PROFILE?=xxx-shared
DIR?=network

clean:
	@echo $(ORANGE)"==> TF Clean"
	rm -rf $(DIR)/.terraform/
	rm -f $(DIR)/.terraform.lock.hcl

install:
	@echo $(ORANGE)"==> Deps Install"
	pre-commit install && \
	tenv install $(TERRAFORM_VERSION)

fmt:
	@echo $(ORANGE)"==> TF Format"
	@terraform -chdir=$(DIR) fmt 

init:
	@echo $(ORANGE)"==> TF Init"
	@terraform -chdir=$(DIR) init

upgrade:
	@echo $(ORANGE)"==> TF Upgrade"
	@terraform -chdir=$(DIR) init -upgrade=true

validate:
	@echo $(ORANGE)"==> TF Validate"
	@terraform -chdir=$(DIR) validate

plan:
	@echo $(ORANGE)"==> TF Plan"
	@terraform -chdir=$(DIR) plan

apply:
	@echo $(RED)"==> TF Apply"
	@terraform -chdir=$(DIR) apply -auto-approve

output:
	@echo $(ORANGE)"==> TF Output"
	@terraform -chdir=$(DIR) output

docs:
	@echo $(ORANGE)"==> TF Docs"
	@terraform-docs markdown ./$(DIR)

test: validate
		@echo $(ORANGE)"==> TFLint"
		@tflint $(DIR)
		
		@echo $(ORANGE)"==> tfsec"	
		@tfsec -s $(DIR)

		@echo $(ORANGE)"==> checkov"
		@checkov -d $(DIR)

cost:
	@echo $(ORANGE)"==> InfraCost"
	@infracost --tfdir $(DIR)

kms:
	aws kms list-aliases | yq e '.0.[].[].AliasName | select(. == "*-tf-kms-key")' -
	aws kms list-keys --region $(REGION)

account_id:
	$(eval ACCOUNT_ID=$(shell aws sts get-caller-identity | yq e  ".0.Account" -))
	@echo Account_ID=$(ACCOUNT_ID)

user_id:
	$(eval USER_ID=$(shell aws sts get-caller-identity | yq e  ".0.UserId" -))
	@echo User_ID=$(USER_ID)

drift: # Test
	driftctl scan --from tfstate+s3://$(ACCOUNT_ID)-$(REGION)-tf-state/state/dev-$(DIR).tfstate

git-login:
	aws sso login --profile $(GIT_PROFILE)

ecr-login: account_id
	aws ecr get-login-password --region $(REGION) | docker login --username AWS --password-stdin $(ACCOUNT_ID).dkr.ecr.$(REGION).amazonaws.com

generate-ovpn-config:
	@echo $(GREEN)"==> To install $(PROFILE).ovpn configuration file, drag and drop it on the Tunnelblick icon in the menu bar or on the list of configurations in the 'Configurations' tab of the 'VPN Details' window."

aws-vault:
	aws-vault --version
	aws-vault exec $(PROFILE)